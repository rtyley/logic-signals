package com.madgag.logic

import com.madgag.logic.protocol.holtek.ht1632c.Channel.ChipSelect.{Follower, Leader}
import com.madgag.logic.protocol.holtek.ht1632c.Channel.Clock.Write
import com.madgag.logic.protocol.holtek.ht1632c.Channel.Data
import com.madgag.logic.Time.Delta
import com.madgag.logic.fileformat.vcd.ValueChangeDump
import com.madgag.logic.protocol.holtek.ht1632c.{Channel, HoltekBits}
import com.madgag.logic.protocol.holtek.ht1632c.operations.Operation
import ValueChangeDump.Header
import ValueChangeDump.Header.{Scope, TimeScale, VarDef}
import fastparse.*
import org.scalatest.flatspec.AnyFlatSpec
import org.scalatest.matchers.should

import java.nio.file.{Files, Paths}
import java.time.Duration
import java.time.Duration.ofNanos
import scala.collection.immutable.SortedMap


class ValueChangeDumpTest extends AnyFlatSpec with should.Matchers {
  "ValueChangeDump" should "parse 'timescale'" in {
    parse("$timescale 1ns $end", Header.timescale(_)).get.value shouldBe TimeScale(ofNanos(1))
  }

  it should "parse '$version'" in {
    parse("$version Generated by Wokwi.com $end", Header.version(_)).get.value shouldBe "Generated by Wokwi.com"
  }

  it should "parse '$date'" in {
    parse("$date Sun, 23 Mar 2025 13:20:18 GMT $end", Header.date(_)).get.value shouldBe()
  }

  it should "parse var" in {
    parse("$var wire 1 & rx_en $end", Header.varDef(_)).get.value shouldBe VarDef(1, "&", "rx_en")
  }

  it should "parse '$enddefinitions'" in {
    parse("$enddefinitions $end", Header.endDefinitions(_)).get.value shouldBe ()
  }

  it should "parse scope" in {
    val scopeLines =
      """$scope module logic $end
        |$var wire 1 ! D0 $end
        |$var wire 1 " D1 $end
        |$var wire 1 # D2 $end
        |$var wire 1 $ D7 $end
        |$upscope $end""".stripMargin

    parse(scopeLines, Header.scope(_)).get.value shouldBe Scope("logic", Seq(
      VarDef(1, "!", "D0"),
      VarDef(1, "\"", "D1"),
      VarDef(1, "#", "D2"),
      VarDef(1, "$", "D7")
    ))
  }

  it should "parse an entire file" in {
    val vcdText = Files.readString(Paths.get(getClass.getClassLoader.getResource("wokwi-logic.vcd").toURI))
    val vcd: ValueChangeDump = parse(vcdText, ValueChangeDump.parser(_)).get.value
    val valueChanges = vcd.dataSection.valueChanges
    valueChanges should not be empty
    valueChanges.filter(_.valueMap.get("$").contains(true)) should have size 8
    println(vcd)
    val signals = vcd.channelSignals
    println(signals)

    signals.chunksWhile("D7", true) should have size 8

    val chunky: ChannelSignals[Delta, Channel] = signals.mapKeys(Map(
      "D0" -> Write,
      "D1" -> Leader,
      "D2" -> Follower.One,
      "D7" -> Data,
    ))

    val boom: Map[Channel.ChipSelect, SortedMap[Delta, Operation]] = HoltekBits.operationsFor(chunky)
    println(boom)

  }
}
